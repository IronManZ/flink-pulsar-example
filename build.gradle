plugins {
    id 'java'
    id 'application'
    id 'idea'
    // shadow plugin to produce fat JARs
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id "com.google.protobuf" version "0.8.19"
}

ext {
    javaVersion = '1.8'
    flinkVersion = '1.15.1'
    scalaBinaryVersion = '2.12'
    slf4jVersion = '1.7.32'
    log4jVersion = '2.17.1'
    flinkVersionNew = flinkVersion.toString().replace("-SNAPSHOT", "") >= "1.15"
}

// artifact properties
group = 'net.smartbow'
version = '0.1-SNAPSHOT'
if (flinkVersionNew) {
    mainClassName = 'net.smartbow.DataStreamJob'
} else {
    mainClassName = 'net.smartbow.StreamingJob'
}
description = """Flink Quickstart Job"""

sourceCompatibility = javaVersion
targetCompatibility = javaVersion
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

applicationDefaultJvmArgs = ["-Dlog4j.configurationFile=log4j2.properties"]

// declare where to find the dependencies of your project
repositories {
    mavenCentral()
    maven {
        url "https://repository.apache.org/content/repositories/snapshots"
        mavenContent {
            snapshotsOnly()
        }
    }
}

// NOTE: We cannot use "compileOnly" or "shadow" configurations since then we could not run code
// in the IDE or with "gradle run". We also cannot exclude transitive dependencies from the
// shadowJar yet (see https://github.com/johnrengelman/shadow/issues/159).
// -> Explicitly define the // libraries we want to be included in the "flinkShadowJar" configuration!
configurations {
    flinkShadowJar // dependencies which go into the shadowJar

    // always exclude these (also from transitive dependencies) since they are provided by Flink
    flinkShadowJar.exclude group: 'org.apache.flink', module: 'force-shading'
    flinkShadowJar.exclude group: 'com.google.code.findbugs', module: 'jsr305'
    flinkShadowJar.exclude group: 'org.slf4j'
    flinkShadowJar.exclude group: 'org.apache.logging.log4j'
}

// declare the dependencies for your production and test code
dependencies {
//     classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.19'
    // You need to depend on the lite runtime library, not protobuf-java
    implementation 'com.google.protobuf:protobuf-java:3.8.0'
    implementation 'io.grpc:grpc-stub:1.15.1'
    implementation 'io.grpc:grpc-protobuf:1.15.1'
    // --------------------------------------------------------------
    // Compile-time dependencies that should NOT be part of the
    // shadow jar and are provided in the lib folder of Flink
    // --------------------------------------------------------------
    if (flinkVersionNew) {
        implementation "org.apache.flink:flink-streaming-java:${flinkVersion}"
        implementation "org.apache.flink:flink-clients:${flinkVersion}"
    } else {
        implementation "org.apache.flink:flink-streaming-java_${scalaBinaryVersion}:${flinkVersion}"
        implementation "org.apache.flink:flink-clients_${scalaBinaryVersion}:${flinkVersion}"
    }

    if (JavaVersion.current().isJava9Compatible()) {
        // Workaround for @javax.annotation.Generated
        // see: https://github.com/grpc/grpc-java/issues/3633
        implementation 'javax.annotation:javax.annotation-api:1.3.1'
    }

    // --------------------------------------------------------------
    // Dependencies that should be part of the shadow jar, e.g.
    // connectors. These must be in the flinkShadowJar configuration!
    // --------------------------------------------------------------
    //flinkShadowJar "org.apache.flink:flink-connector-kafka:${flinkVersion}"
    flinkShadowJar "org.apache.flink:flink-connector-pulsar:${flinkVersion}"
    flinkShadowJar "org.apache.pulsar:pulsar-client-all:2.9.1"
    flinkShadowJar "org.apache.pulsar:pulsar-client-api:2.9.1"
    flinkShadowJar 'com.google.protobuf:protobuf-java:3.8.0'
    flinkShadowJar 'io.netty:netty-buffer:4.1.70.Final'
    flinkShadowJar 'org.glassfish.hk2:hk2-locator:2.5.0-b42'
    flinkShadowJar 'io.netty:netty-all:4.1.70.Final'
    flinkShadowJar 'io.netty:netty-common:4.1.70.Final'
//    implementation 'io.streamnative.connectors:pulsar-flink-connector-origin:1.13.1.0'
//    flinkShadowJar "io.streamnative.connectors:flink-connector-pulsar:1.15.1.0"

    runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
    runtimeOnly "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    runtimeOnly "org.apache.logging.log4j:log4j-core:${log4jVersion}"

    // Add test dependencies here.
    // testCompile "junit:junit:4.12"
}

// make compileOnly dependencies available for tests:
sourceSets {
    main {
        proto {
            // In addition to the default 'src/main/proto'
            srcDir 'src/main/java/proto'
            srcDir 'src/main/protocolbuffers'
        }
    }
    main.compileClasspath += configurations.flinkShadowJar
    main.runtimeClasspath += configurations.flinkShadowJar

    test.compileClasspath += configurations.flinkShadowJar
    test.runtimeClasspath += configurations.flinkShadowJar

    javadoc.classpath += configurations.flinkShadowJar
}

protobuf {
    protoc {
        // The artifact spec for the Protobuf Compiler
        artifact = 'com.google.protobuf:protoc:3.8.0'
    }
    plugins {
        // Optional: an artifact spec for a protoc plugin, with "grpc" as
        // the identifier, which can be referred to in the "plugins"
        // container of the "generateProtoTasks" closure.
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.15.1'
        }
    }
    generateProtoTasks {
        ofSourceSet('main').configureEach {
            plugins {
                // Apply the "grpc" plugin whose spec is defined above, without
                // options.  Note the braces cannot be omitted, otherwise the
                // plugin will not be added. This is because of the implicit way
                // NamedDomainObjectContainer binds the methods.
                grpc { }
            }
        }
    }
}

run.classpath = sourceSets.main.runtimeClasspath

jar {
    manifest {
        attributes 'Built-By': System.getProperty('user.name'),
                'Build-Jdk': System.getProperty('java.version')
    }
}

shadowJar {
    configurations = [project.configurations.flinkShadowJar]
}
